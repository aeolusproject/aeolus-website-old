---
title: Aeolus | High Availability
breadcrumb_name: High Availability
extension: html
filter: haml
---
%h1 High Availability

%p
  Since March the
  %a{ :href => "http://www.pacemaker-cloud.org",
      :title => "Pacemaker Cloud project" } Pacemaker Cloud project
  has been working to provide high availability functionality for Aeolus.

.section-grouping
  %h2 What is high service availability?

  %p
    A high degree of availability
    (<a href="http://en.wikipedia.org/wiki/Availability" title="Availability article on wikipedia">link</a>) 
    applied to end user applications.
  %p
    For more details, see further detailed mathematical constructs in this
    presentation (pdf):

  %p
    &nbsp;&nbsp;&nbsp;
    %a{ :href => "http://www.redhat.com/summit/2011/presentations/summit/whats_new/thursday/dake_th_1130_high_availability_in_the_cloud.pdf",
        :title => "High Availability in the Cloud" } http://www.redhat.com/summit/2011/presentations/summit/whats_new/thursday/dake_th_1130_high_availability_in_the_cloud.pdf

%br

.section-grouping
  %h2 How do you achieve high service availability?

  %p
    There are four major steps:

  %ol
    %li Monitor failure of components
    %li Isolate and terminate failed components
    %li Recover components by restart and escalation
    %li Report errors so a physical repair can be made

%br

.section-grouping
  %h2 How does this relate to Aeolus?

  %p
    Aeolus has several components that we are interested in appling the HA
    methodology to.

  %p
    These are <b>applications</b>, <b>assemblies</b>, and <b>deployables</b>.

  %p
    In order to execute the high availability methodology, pacemaker-cloud
    needs to know how an application is <b>started</b>, <b>stopped</b>, or
    <b>monitored</b>. This is usually achieved via init scripts, but custom
    mechanisms could also be used.

%br

.section-grouping
  %h2 What is recovery escalation?

  %p
    If steps 2 or 3 fail, it is an indicator that the higher level object
    may have failed, and at minimum can no longer be trusted.

  %p
    For example, if an application fails to restart, the assembly may be bad.

  %p
    To resolve this problem, we escalate application failures into assembly
    failures.

%br

.section-grouping
  %h2 Why monitor applications at all?

  %p
    Monitoring applications allows the complete High Availability (HA)
    methodology to be applied to enterprise and open source applications.

  %p
    This monitoring provides improved availability.

  -#.note
    %p
      %b REWRITTEN:
      So they can be restarted automatically (with
      escalation) when faults occur.

    %p
      This is what most enterprise software consumers want, as it reduces the
      loss of opportunity from an application not being available.

    %p.warning
      %b UGH:
      The phrase "loss of opportunity" is hard to work into sentences.  Is
      that a specific phrase with meaning, or is it ok to figure out a more
      digestible one?

    %p
      The only way to do this effectively is by active monitoring, to notice
      the fault has happened in the first place.


%br

.section-grouping
  %h2 Why not have the cloud provider tell when an assembly has failed?
  
  %p
    Typically cloud providers can tell if a VM crashes or disappears, but
    can't tell whether the VM's operating system and applications are still
    functioning.

  %p
    This can lead to situations where the VM has failed in some way that the
    cloud provider isn't aware of because it uses passive monitoring.

  %p
    A better approach approach is to use active monitoring, where the software
    running in the virtual machine is checked periodically to ensure it is
    functioning correctly.

-#.section-grouping
  %h2
    Why not just have the cloud provider tell us when an assembly has failed?

  .note
    %p
      %b REWRITTEN:
      This technique is called passive monitoring.  It has the cloud
      provider send automatic notification whenever a virtual machine fails.

    %p
      Unfortunately this doesn't check the health of the software running
      inside the virtual machine.

    %p
      For example, a database or web server in a vm could be having problems,
      without the cloud provider knowing about it.  From the cloud providers
      point of view, the vm is still working properly.

%br

.section-grouping
  %h2 What do we need out of Aeolus?

  %p
    %ol
      %li
        %p
          We need
          %a{ :href => "https://github.com/matahari/matahari/wiki",
              :title => "Matahari Wiki link" } Matahari
          installed into the assemblies, whether at instance build or launch
          time.

      %li
        %p
          An XML schema to describe the user application's <b>start</b>,
          <b>stop</b>, and <b>monitoring</b> mechanism.

        %p
          This is typically achieved through init scripts or OCF compliant
          scripts on the assembly.
